<?xml version="1.0"?>
<library>
  <!--
  If you are viewing this on GitHub and want to download it, right click on the RAW button
  just above, and select "Save link as..."
  -->


  <!--
  NpcLib v1.1
  
  Quest version: 5.7
  Written by: The Pixie, 2017
  
  Note that this version requires PathLib by Jay Nabonne
  http://docs.textadventures.co.uk/quest/libraries/path_library.html

  -->

  
  
  <type name="NpcType">
    <takeaturn type="script"><![CDATA[
      if (ListCount(this.actions) > 0) {
        s = StringListItem(this.actions, 0)
        if (NpcAct (this, s)) {
          list remove (this.actions, s)
        }
      }
    ]]></takeaturn>
  </type>

  
  
  
  
  <turnscript name="NpcTurnScript">
    <enabled/>
    <script>
      foreach (o, AllObjects()) {
        if (HasScript(o, "takeaturn")) {
          if (GetBoolean(o, "paused")) {
            o.paused = false
          }
          else {
            do (o, "takeaturn")
          }
        }
      }
    </script>
  </turnscript>


  
  


  <function name="PrintIfHere" parameters="room, s">
    if (game.pov.parent = room) {
      msg (s)
    }
  </function>
  
  
  <function name="NpcAct" parameters="npc, s" type="boolean">
    ary = Split(s, ":")
    if (ListCount(ary) = 1) {
      PrintIfHere (npc.parent, s)
      f = true
    }
    else {
      game.currentobj = GetObject (StringListItem(ary, 1))
      if (game.currentobj = null) {
        error ("Failed to find object: " + StringListItem(ary, 1))
      }
      game.currentnpc = npc
      f = Eval("Npc" + StringListItem(ary, 0) + "(game.currentnpc, game.currentobj)")
    }
    return (f)
  </function>

  <function name="NpcMove" parameters="npc, obj" type="boolean">
    oldroom = npc.parent
    npc.parent = obj
    if (not oldroom = npc.parent) {
      PrintIfHere (oldroom, GetDisplayName(npc) + " leaves the room.")
      PrintIfHere (npc.parent, GetDisplayName(npc) + " enters the room.")
    }
    return (true)
  </function>

  <function name="NpcGet" parameters="npc, obj" type="boolean">
    obj.parent = npc
    PrintIfHere (npc.parent, GetDisplayName(npc) + " picks up the " + GetDisplayAlias(obj) + ".")
    return (true)
  </function>

  <function name="NpcDrop" parameters="npc, obj" type="boolean">
    obj.parent = npc.parent
    PrintIfHere (npc.parent, GetDisplayName(npc) + " drops the " + GetDisplayAlias(obj) + ".")
    return (true)
  </function>

  <function name="NpcWait" parameters="npc, obj" type="boolean">
    if (obj = game.pov or HasScript(obj, "takeaturn")) {
      return (npc.parent = obj.parent)
    }
    else if (HasBoolean(obj, "locked")) {
      return (not obj.locked)
    }
    else {
      return (npc = obj.parent)
    }
  </function>

  <function name="NpcGive" parameters="npc, obj" type="boolean">
    obj.parent = game.pov
    PrintIfHere (npc.parent, GetDisplayName(npc) + " gives you the " + GetDisplayAlias(obj) + ".")
    return (true)
  </function>

  <function name="NpcSearch" parameters="npc, obj" type="boolean">
    exit = PickOneUnlockedExit (npc.parent)
    oldroom = npc.parent
    NpcMove(npc, exit.to)
    return (obj.parent = npc.parent)
  </function>

  <function name="NpcLock" parameters="npc, obj" type="boolean">
    if (not obj.locked) {
      obj.locked = true
      PrintIfHere (npc.parent, GetDisplayName(npc) + " locks the " + GetDisplayAlias(obj) + ".")
    }
    return (true)
  </function>

  <function name="NpcUnlock" parameters="npc, obj" type="boolean">
    if (obj.locked) {
      obj.locked = false
      PrintIfHere (npc.parent, GetDisplayName(npc) + " unlocks the " + GetDisplayAlias(obj) + ".")
    }
    return (true)
  </function>

  <function name="NpcOpen" parameters="npc, obj" type="boolean">
    if (not obj.isopen) {
      obj.isopen = true
      PrintIfHere (npc.parent, GetDisplayName(npc) + " opens the " + GetDisplayAlias(obj) + ".")
    }
    return (true)
  </function>

  <function name="NpcClose" parameters="npc, obj" type="boolean">
    if (obj.isopen) {
      obj.isopen = false
      PrintIfHere (npc.parent, GetDisplayName(npc) + " closes the " + GetDisplayAlias(obj) + ".")
    }
    return (true)
  </function>

  <function name="NpcWear" parameters="npc, obj" type="boolean">
    if (not obj.worn) {
      obj.worn = true
      obj.parent = npc
      PrintIfHere (npc.parent, GetDisplayName(npc) + " puts on the " + GetDisplayAlias(obj) + ".")
    }
    return (true)
  </function>

  <function name="NpcRemove" parameters="npc, obj" type="boolean">
    if (obj.worn) {
      obj.worn = false
      obj.parent = npc
      PrintIfHere (npc.parent, GetDisplayName(npc) + " takes off the " + GetDisplayAlias(obj) + ".")
    }
    return (true)
  </function>

  <function name="NpcPause" parameters="npc, obj" type="boolean">
    return (true)
  </function>

  <function name="NpcGoTo" parameters="npc, obj" type="boolean">
    l = PathLib_GetPathExt(npc.parent, obj, AllExits(), -1)
    if (ListCount(l) = 0) {
      return (true)
    }
    exit = ObjectListItem(l, 0)
    NpcMove (npc, exit.to)
    return (ListCount(l) = 1)
  </function>

  <function name="NpcScript" parameters="npc, obj" type="boolean">
    npc.deletefromlist = true
    if (HasScript (npc, "npcscript")) {
      d = NewDictionary()
      dictionary add (d, "item", obj)
      do (npc, "npcscript", d)
    }
    return (npc.deletefromlist)
  </function>

  
  
  
  <!-- Find a path from start to end using a set of exits and maxlength passed. -->
  <function name="PathLib_GetPathExt" parameters="start, end, exits, maxlength" type="objectlist">
    <![CDATA[
    // From PathLib by Jay Nabonne
    //msg("GetPathExt from " + start + " to " + end)
    // It is more efficient to mark the rooms rather than track them in lists.
    if (not HasInt(game, "pathID")) {
      game.pathID = 0
    }
    // Bump the path ID for this path. This saves us from having to unmark all previously marked rooms.
    game.pathID = game.pathID + 1

    path = null
    current = NewList()
    entry = _PathLib_AddEntry(current, start)
    dictionary add(entry, "path", NewObjectList())
    length = 0
    iterations = 0
  	while (ListCount(current) <> 0 and path = null and (maxlength = -1 or length <= maxlength)) {
      iterations = iterations + 1
      //msg("iterations = " + iterations)
  		entry = current[0]
  		list remove(current, entry)
      room = entry["room"]
      //msg("room = " + room.name)
      room.pathlib_visited = game.pathID
      //msg("entry=" + entry)
      if (room = end) {
        path = entry["path"]
        //msg("path=" + path)
      } else {
        foreach (exit, exits) {
          toRoom = exit.to
          //msg("toRoom = " + toRoom)
          if (toRoom <> null) {
            if (exit.parent = room and not GetBoolean(exit, "excludeFromPaths")) {
              // This is a room to be investigated.
              if (GetInt(toRoom, "pathlib_current") <> game.pathID and GetInt(toRoom, "pathlib_visited") <> game.pathID) {
                // We have not touched this room yet. Add its exit to the list.
                newEntry = _PathLib_AddEntry(current, toRoom)
                // Assign to an object attribute to force a copy.
                game.PathLib_pathtemp = entry["path"]
                list add(game.PathLib_pathtemp, exit)
                dictionary add(newEntry, "path", game.PathLib_pathtemp)
                game.PathLib_pathtemp = null
                //msg("Added")
              }
            }
          }
        }
      }
      length = ListCount(entry["path"])
  	}
    //msg("iterations = " + iterations + ", path count = " + ListCount(path))
  	return (path)
    ]]>
  </function>

  <!-- Add a room entry to the list. -->
  <function name="_PathLib_AddEntry" parameters="list, room" type="dictionary">
    // From PathLib by Jay Nabonne
    <!-- msg ("Add entry: " + room.name + "(length:" + ListCount(list) + ")") -->
    entry = NewDictionary()
    dictionary add(entry, "room", room)
    list add(list, entry)
    room.pathlib_current = game.pathID
    return (entry)
  </function>
  
  
  
  
  
  <!-- Interface -->
  <tab>
    <parent>_ObjectEditor</parent>
    <caption>NPCs</caption>
    <mustnotinherit>editor_room; defaultplayer</mustnotinherit>

    <control>
      <controltype>dropdowntypes</controltype>
      <caption>Type</caption>
      <types>*=None; NpcType=NPC</types>
      <width>150</width>
    </control>
    
    <control>
     <caption>List of actions to perform</caption>
      <controltype>list</controltype>
      <attribute>actions</attribute>
      <width>200</width>
      <mustinherit>NpcType</mustinherit>
      <editprompt>Action (eg Move:kitchen, or just text)</editprompt>
    </control>

    <control>
      <controltype>title</controltype>
      <caption>Available actions:</caption>
    </control>
      
    <control>
      <controltype>label</controltype>
      <caption>Move: NPC will move directly to the indicated room</caption>
    </control>
      
    <control>
      <controltype>label</controltype>
      <caption>Get: NPC will pick up the indicated item (whether it is there or not)</caption>
    </control>
      
    <control>
      <controltype>label</controltype>
      <caption>Drop: NPC will drop the indicated item (whether carried or not)</caption>
    </control>
      
    <control>
      <controltype>label</controltype>
      <caption>Give: NPC will give the indicated item to the player (whether carried or not)</caption>
    </control>
      
    <control>
      <controltype>label</controltype>
      <caption>Lock/Unlock/Open/Close: NPC will lock/unlock/open/close the indicated item (whether it is there or not)</caption>
    </control>
      
    <control>
      <controltype>label</controltype>
      <caption>Wear/Remove: NPC will wear/remove the indicated item (whether it is there or not)</caption>
    </control>
      
    <control>
      <controltype>label</controltype>
      <caption>Search: NPC will move via a random exit, and will continue to do so until in the same room as the indicated item</caption>
    </control>

    <control>
      <controltype>label</controltype>
      <caption>Wait: NPC will wait, and will continue to do so until the player is the same room if the indicated item is the player, or the indicated item is unlocked if it has a "locked" attribute, or until given the indicated item otherwise.</caption>
    </control>
      
    <control>
      <controltype>label</controltype>
      <caption>Pause: NPC does nothing for one turn.</caption>
    </control>
      
    <control>
      <controltype>label</controltype>
      <caption>Script: Runs the NPC's "npcscript" script. If this sets the NPC's "deletefromlist" attribute to false, then this will rin again next turn.</caption>
    </control>
      
    <control>
      <controltype>label</controltype>
      <caption>You can add your own verbs; add a new function called "Npc", followed by the verb, have it return a Boolean, and take two attributes, the NPc and the item.</caption>
    </control>
      
    <control>
      <controltype>title</controltype>
      <caption>Script</caption>
    </control>
      
    <control>
      <controltype>script</controltype>
      <caption>NPC script (run with NpcScript)</caption>
      <attribute>npcscript</attribute>
      <width>200</width>
      <mustinherit>NpcType</mustinherit>
    </control>
    
  </tab>
  
  
  
</library>