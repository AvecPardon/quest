<?xml version="1.0"?>
<library>
  <!--
  If you are viewing this on GitHub and want to download it, right click on the RAW button
  just above, and select "Save link as..."
  -->


  <!--
  LiftLib v2.3
  
  Quest version: 5.6
  Written by: The Pixie, 2011-2018
  With thanks to KV

  Tutorial and notes here:
  https://github.com/ThePix/quest/wiki/Lift-Library
  -->




  <verb name="press">
    <property>press</property>
    <pattern>press;push</pattern>
    <defaultexpression>"You can't press " + object.article + "."</defaultexpression>
  </verb>
  
  
  

  <type name="liftroom">
    <current_floor type="int">1</current_floor>
    <usage_count type="int">0</usage_count>
    <lockexits type="boolean">false</lockexits>
    <goingup>The lift ascends to ###.</goingup>
    <goingdown>The lift descends to ###.</goingdown>
    <leavingmsg type="string"></leavingmsg>
    <samefloor>Nothing happens. Perhaps because you are already on ###.</samefloor>
    <attr name="changedcurrent_floor" type="script">
      oldvalue = this.last_floor
      currentvalue = this.current_floor
      change = oldvalue - currentvalue
      if (game.gridmap) {
	      thisdict = DictionaryItem(player.grid_coordinates, this.name)
        if (Grid_GetRoomBooleanForPlayer(game.pov, this, "grid_isdrawn")) {
          dictionary remove (thisdict, "z")
          dictionary add (thisdict, "z", currentvalue*1.0+change)
          Grid_CalculateMapCoordinates (this, game.pov)
          Grid_Redraw  //THIS CLEARS ANY GRID FILLS!
          Grid_DrawPlayerInRoom (game.pov.parent)
        }
      }
    </attr>
    <onexit type="script">
      LeavingTheLift(this)
    </onexit>
  </type>
  
  
  

  <type name="liftbutton">
    <displayverbs type="simplestringlist">Press</displayverbs>
    <floor type="int">1</floor>
    <pressmsg>You press the button.</pressmsg>
    <press type="script">
      if (HasString(this, "lockedmessage")) {
        msg (this.lockedmessage)
      }
      else {
        _PressButton(this, false)
      }
    </press>
    <move type="script">
      // Invoke this to have the lift move to this button's destination
      // without any text appearing. The Arrival function is not called
      _PressButton(this, true)
    </move>
  </type>

  <type name="liftentrance">
    <runscript type="boolean">true</runscript>
    <script type="script">
      exit = ObjectListItem (ScopeExitsForRoom (this.to), 0)
      exit.to = game.pov.parent
      game.pov.parent.last_floor = game.pov.parent.parent
      MoveObject (game.pov, this.to)
      //msg("about to check children of " + this.to.name)
      foreach (obj, GetDirectChildren (this.to)) {
        if (DoesInherit (obj, "liftbutton")) {
          if (obj.to = this.parent) {
            this.to.current_floor = obj.floor
            //msg("exit setting to " + obj.floor + " a " + TypeOf(obj.floor))
          }
        }
      }
    </script>
  </type>

  
  <function name="_PressButton" parameters="button, silently">
      exit = ObjectListItem (ScopeExitsForRoom (button.parent), 0)
      current = exit.to
      current_button = null
      foreach (o, GetDirectChildren(button.parent)) {
        if (o.destination = current) current_button = o
      }
      if (exit.to = button.destination) {
        moved = false
        s = button.parent.samefloor
      }
      else {
        moved = true
        button.parent.last_floor = button.parent.current_floor
        exit.to = button.destination
        if (button.parent.current_floor > button.floor) {
          s = button.parent.goingdown
        }
        else {
          s = button.parent.goingup
        }
        button.parent.current_floor = button.floor
        if (not current_button = null) {
          if (HasString(current_button, "departure")) {
            s = current_button.departure + " " + s
          }
        }
        if (HasString(button, "arrival")) {
          s = s + " " + button.arrival
        }
        button.parent.usage_count = button.parent.usage_count + 1
      }
      // prepend the button pressing message
      s = button.pressmsg + " " + s
      // Swap ### for the floor name
      if (HasString(button, "floorname")) {
        s = Replace (s, "###", ToString (button.floorname))
      }
      else {
        s = Replace (s, "###", "floor " + button.floor)
      }
      if (not silently) {
        Arrival(button, s, moved)
      }
	</function>

  
  


  <!--
  This is called when the player presses a button (but not
  when the lift is moved another time).
  You can override this to have it print in a fancy way, or to have it do something when
  the lift moves.
  -->
  <function name="Arrival" parameters="button, s, moved">
    msg(s)
	</function>


  <function name="LeavingTheLift" parameters="lift">
    if (not lift.leavingmsg = "") {
      msg (lift.leavingmsg)
    }
	</function>


  <function name="LiftRoom" type="object" parameters="button">
    if (DoesInherit(button, "liftroom")) {
      return (button)
    }
    return (button.parent)
	</function>

  <function name="LiftExit" type="object" parameters="button">
    return (ObjectListItem (ScopeExitsForRoom (LiftRoom(button)), 0))
	</function>

  <function name="LiftCurrentFloor" type="object" parameters="button">
    exit = LiftExit(button)
    return (exit.to)
	</function>

  <function name="LiftCurrentButton" type="object" parameters="button">
    current = LiftCurrentFloor(button)
    current_button = null
    foreach (o, GetDirectChildren(LiftRoom(button))) {
      if (o.destination = current) current_button = o
    }
    return (current_button)
	</function>

  <function name="LiftAllButtons" type="objectlist" parameters="button">
    ol = NewObjectList()
    foreach (o, GetDirectChildren(LiftRoom(button))) {
      if (DoesInherit(o, "liftbutton")) list add(ol, o)
    }
    return (ol)
	</function>

  <function name="LiftAllEntrances" type="objectlist" parameters="button">
    ol = NewObjectList()
    foreach (o, LiftAllButtons(button)) {
      list add(ol, GetObject(GetExitByLink (o.destination, LiftRoom(button))))
    }
    return (ol)
	</function>

  <function name="LiftCurrentEntrance" type="object" parameters="button">
    return (GetObject(GetExitByLink (LiftCurrentFloor(button), LiftRoom(button))))
	</function>


  
  
  
  
  
 <!-- =================================================== -->
  <!-- Tabs -->

  <tab>
    <parent>_ObjectEditor</parent>
    <caption>Lift</caption>
    <mustnotinherit>defaultplayer</mustnotinherit>

    <control>
      <controltype>dropdowntypes</controltype>
      <caption>Type</caption>
      <types>*=None; liftroom=Lift; liftbutton=Lift Button; liftentrance=Lift Entrance</types>
      <width>150</width>
    </control>

    <control>
      <controltype>textbox</controltype>
      <caption>Same floor message</caption>
      <attribute>samefloor</attribute>
      <mustinherit>liftroom</mustinherit>
    </control>

    <control>
      <controltype>textbox</controltype>
      <caption>The going up message</caption>
      <attribute>goingup</attribute>
      <mustinherit>liftroom</mustinherit>
    </control>

    <control>
      <controltype>textbox</controltype>
      <caption>The going down message</caption>
      <attribute>goingdown</attribute>
      <mustinherit>liftroom</mustinherit>
    </control>

    <control>
      <controltype>textbox</controltype>
      <caption>The leaving message</caption>
      <attribute>leavingmsg</attribute>
      <mustinherit>liftroom</mustinherit>
    </control>

    <control>
      <controltype>checkbox</controltype>
      <caption>Lock exit after entering lift</caption>
      <attribute>lockexits</attribute>
      <mustinherit>liftroom</mustinherit>
    </control>

    <control>
      <controltype>textbox</controltype>
      <caption>Departure message</caption>
      <attribute>departure</attribute>
      <mustinherit>editor_room</mustinherit>
      <mustinherit>liftbutton</mustinherit>
    </control>

    <control>
      <controltype>textbox</controltype>
      <caption>Arrival message</caption>
      <attribute>arrival</attribute>
      <mustinherit>liftbutton</mustinherit>
    </control>

    <control>
      <controltype>textbox</controltype>
      <caption>Press message</caption>
      <attribute>pressmsg</attribute>
      <mustinherit>liftbutton</mustinherit>
    </control>

    <control>
      <controltype>textbox</controltype>
      <caption>Floor name</caption>
      <attribute>floorname</attribute>
      <mustinherit>liftbutton</mustinherit>
    </control>

    <control>
      <controltype>textbox</controltype>
      <caption>Locked message</caption>
      <attribute>lockedmessage</attribute>
      <mustinherit>liftbutton</mustinherit>
    </control>


    <control>
      <controltype>objects</controltype>
      <caption>Destination</caption>
      <attribute>destination</attribute>
      <mustinherit>liftbutton</mustinherit>
    </control>

    <control>
      <controltype>number</controltype>
      <caption>Floor</caption>
      <attribute>floor</attribute>
      <width>100</width>
      <mustinherit>liftbutton</mustinherit>
    </control>

  </tab>
</library>