<?xml version="1.0"?>
<library>
  <!--
  If you are viewing thios on GitHub and want to download it, right click on the RAW button
  just above, and select "Save link as..."
  -->
  
  <!--
  Using this library you can easily implement one or more lifts in your game. Each lift can stop at any number
  of floors.
  Of course, you could apply this to any transport system that involves pressing a button to get to a destination.
  
  Documentation is here:
  https://github.com/ThePix/quest/wiki/Lift-Library
  
  Version 2

  -->




  <verb>
    <property>press</property>
    <pattern>press;push</pattern>
    <defaultexpression>"You can't press " + object.article + "."</defaultexpression>
  </verb>
  
  
  

  <type name="liftroom">
    <current_floor type="int">1</current_floor>
    <usage_count type="int">0</usage_count>
    <lockexits type="boolean">false</lockexits>
    <goingup>The lift ascends to ###.</goingup>
    <goingdown>The lift descends to ###.</goingdown>
    <leavingmsg type="string"></leavingmsg>
    <samefloor>Nothing happens. Perhaps because you are already on ###.</samefloor>
    <onexit type="script">
      if (not this.leavingmsg = "") P (this.leavingmsg)
      LeavingTheLift
    </onexit>
  </type>
  
  
  

  <type name="liftbutton">
    <displayverbs type="simplestringlist">Press</displayverbs>
    <floor type="int">1</floor>
    <pressmsg>You press the button.</pressmsg>
    <press type="script"><![CDATA[
      exit = ObjectListItem (ScopeExitsForRoom (this.parent), 0)
      current = exit.to
      current_button = null
      foreach (o, GetDirectChildren(this.parent)) {
        if (o.destination = current) current_button = o
      }
      if (exit.to = this.destination) {
        s = this.parent.samefloor
      }
      else {
        exit.to = this.destination
        if (this.parent.current_floor > this.floor) {
          s = this.parent.goingdown
        }
        else {
          s = this.parent.goingup
        }
        this.parent.current_floor = this.floor
        if (not current_button = null) {
          if (HasString(current_button, "departure")) {
            s = current_button.departure + " " + s
          }
        }
        if (HasString(this, "arrival")) {
          s = s + " " + this.arrival
        }
        this.parent.usage_count = this.parent.usage_count + 1
      }

      // prepend the button pressing message
      s = this.pressmsg + " " + s

      // Swap ### for the floor name
      if (HasString(this, "floorname")) {
        P (Replace (s, "###", ToString (this.floorname)))
      }
      else {
        P (Replace (s, "###", "floor " + this.floor))
      }
    ]]></press>
    <move type="script">
      // Invoke this to have the lift move to this button's destination
      // without any text appearing
      exit = ObjectListItem (ScopeExitsForRoom (this.parent), 0)
      exit.to = this.to
      this.parent.current_floor = this.floor
    </move>
  </type>

  <type name="liftentrance">
    <runscript type="boolean">true</runscript>
    <script type="script">
      exit = ObjectListItem (ScopeExitsForRoom (this.to), 0)
      exit.to = game.pov.parent
      MoveObject (game.pov, this.to)
      //msg("about to check children of " + this.to.name)
      foreach (obj, GetDirectChildren (this.to)) {
        if (DoesInherit (obj, "liftbutton")) {
          if (obj.to = this.parent) {
            this.to.current_floor = obj.floor
            //msg("exit setting to " + obj.floor + " a " + TypeOf(obj.floor))
          }
        }
      }
    </script>
  </type>

  
  <!--
  This gets called only when the action is successful; for text that is part of
  the narrative. You can override this in your own code to flag that a command was successful
  or to display narrative text differently to meta text.
  -->
  <function name="P" parameters="s">
    msg(s)
	</function>


  <function name="LeavingTheLift">
	</function>


  <function name="LiftRoom" type="object" parameters="button">
    if (DoesInherit(button, "liftroom")) {
      return (button)
    }
    return (button.parent)
	</function>

  <function name="LiftExit" type="object" parameters="button">
    return (ObjectListItem (ScopeExitsForRoom (LiftRoom(button)), 0))
	</function>

  <function name="LiftCurrentFloor" type="object" parameters="button">
    exit = LiftExit(button)
    return (exit.to)
	</function>

  <function name="LiftCurrentButton" type="object" parameters="button">
    current = LiftCurrentFloor(button)
    current_button = null
    foreach (o, GetDirectChildren(LiftRoom(button))) {
      if (o.destination = current) current_button = o
    }
    return (current_button)
	</function>

  <function name="LiftAllButtons" type="objectlist" parameters="button">
    ol = NewObjectList()
    foreach (o, GetDirectChildren(LiftRoom(button))) {
      if (DoesInherit(o, "liftbutton")) list add(ol, o)
    }
    return (ol)
	</function>

  <function name="LiftAllEntrances" type="objectlist" parameters="button">
    ol = NewObjectList()
    foreach (o, LiftAllButtons(button)) {
      list add(ol, GetObject(GetExitByLink (o.destination, LiftRoom(button))))
    }
    return (ol)
	</function>

  <function name="LiftCurrentEntrance" type="object" parameters="button">
    return (GetObject(GetExitByLink (LiftCurrentFloor(button), LiftRoom(button))))
	</function>


  
  
  
  
  
 <!-- =================================================== -->
  <!-- Tabs -->

  <tab>
    <parent>_ObjectEditor</parent>
    <caption>Lift</caption>
    <mustnotinherit>defaultplayer</mustnotinherit>

    <control>
      <controltype>dropdowntypes</controltype>
      <caption>Type</caption>
      <types>*=None; liftroom=Lift; liftbutton=Lift Button; liftentrance=Lift Entrance</types>
      <width>150</width>
    </control>

    <control>
      <controltype>textbox</controltype>
      <caption>Same floor message</caption>
      <attribute>samefloor</attribute>
      <mustinherit>liftroom</mustinherit>
    </control>

    <control>
      <controltype>textbox</controltype>
      <caption>The going up message</caption>
      <attribute>goingup</attribute>
      <mustinherit>liftroom</mustinherit>
    </control>

    <control>
      <controltype>textbox</controltype>
      <caption>The going down message</caption>
      <attribute>goingdown</attribute>
      <mustinherit>liftroom</mustinherit>
    </control>

    <control>
      <controltype>textbox</controltype>
      <caption>The leaving message</caption>
      <attribute>leavingmsg</attribute>
      <mustinherit>liftroom</mustinherit>
    </control>

    <control>
      <controltype>checkbox</controltype>
      <caption>Lock exit after entering lift</caption>
      <attribute>lockexits</attribute>
      <mustinherit>liftroom</mustinherit>
    </control>

    <control>
      <controltype>textbox</controltype>
      <caption>Departure message</caption>
      <attribute>departure</attribute>
      <mustinherit>editor_room</mustinherit>
      <mustinherit>liftbutton</mustinherit>
    </control>

    <control>
      <controltype>textbox</controltype>
      <caption>Arrival message</caption>
      <attribute>arrival</attribute>
      <mustinherit>liftbutton</mustinherit>
    </control>

    <control>
      <controltype>textbox</controltype>
      <caption>Press message</caption>
      <attribute>pressmsg</attribute>
      <mustinherit>liftbutton</mustinherit>
    </control>

    <control>
      <controltype>textbox</controltype>
      <caption>Floor name</caption>
      <attribute>floorname</attribute>
      <mustinherit>liftbutton</mustinherit>
    </control>


    <control>
      <controltype>objects</controltype>
      <caption>Destination</caption>
      <attribute>destination</attribute>
      <mustinherit>liftbutton</mustinherit>
    </control>

    <control>
      <controltype>number</controltype>
      <caption>Floor</caption>
      <attribute>floor</attribute>
      <width>100</width>
      <mustinherit>liftbutton</mustinherit>
    </control>

  </tab>
</library>