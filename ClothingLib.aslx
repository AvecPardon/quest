<library>
  <!--
  If you are viewing thios on GitHub and want to download it, right click on the RAW button
  just above, and select "Save link as..."
  -->

    <!--
    Pixie's clothing Library v3.0
    
    Tutorial here:
    http://pixie-if.blogspot.co.uk/p/clothing.html
 
		Based on: Chase's Wearables Library v2.1,
		Based on: Pixie's Clothing Library
		
		You may edit this library however you please.
		
    I have changed the internal code a fair bit, but you should be able to swap this into any existing game with no problem,
    the wearables type is almost the same, the difference being that layer zero is special. If none of your garments are assigned
    to layer zero and you do not use the incl;uded functions in your own code, you are good to go.
    
    Changes:
    
    The library uses game.pov rather than player, in line with other libraries, to support the POV functionality
    
    The verbs for each garment are changed depending on the game state. You only see "Wear" for an item
    that can be worn right now.
    
    Supports inventory limits; items that are worn do not count towards the number of objects held
    (but the so-called volume limit, which is really a weight limit, will include worn items).
    
    Also offers some support for armour, bonus-giving garments, NPC clothing.                   
                          
    -->
	
	<dynamictemplate name="WearSuccessful">"You put " + object.article + " on."</dynamictemplate>
	<dynamictemplate name="WearUnsuccessful">"You can't wear " + object.article + "."</dynamictemplate>
	<dynamictemplate name="CannotWearIfNotHeld">"You would need to get it before you can put it on."</dynamictemplate>
	<dynamictemplate name="AlreadyWearing">"You are already wearing " + object.article + "."</dynamictemplate>
	<dynamictemplate name="CannotWearOver">"You cannot wear that over " + object.display + "."</dynamictemplate>
	<dynamictemplate name="CannotWearWith">"You cannot wear that while wearing " + object.display + "."</dynamictemplate>
	
	<dynamictemplate name="RemoveSuccessful">"You take " + object.article + " off."</dynamictemplate>
	<dynamictemplate name="RemoveFirst">"You can't remove that while wearing "+object.display+"."</dynamictemplate>
	
	<template name="Wear">Wear</template>
	<verbtemplate name="wear">wear</verbtemplate>
	<verbtemplate name="wear">put on</verbtemplate>
	<verbtemplate name="wear">don</verbtemplate>
	
	<template name="Remove">Remove</template>
	<verbtemplate name="remove">remove</verbtemplate>
	<verbtemplate name="remove">take off</verbtemplate>
	<verbtemplate name="remove">doff</verbtemplate>
  
  
  
  <!--  OBJECTS  -->
  
  <object name="lists">
    <lookat type="stringlist">
      <value>Look at</value>
    </lookat>
    <drop type="stringlist">
      <value>Look at</value>
      <value>Drop</value>
    </drop>
    <remove type="stringlist">
      <value>Look at</value>
      <value>Remove</value>
    </remove>
    <wear type="stringlist">
      <value>Look at</value>
      <value>Drop</value>
      <value>Wear</value>
    </wear>
  </object>
 
  
  <!--  COMMANDS  -->

	
	<command name="wear" template="wear">
		<multiple>
			return (ScopeInventory())
		</multiple>
		<script>
			foreach (obj, object) {
				f = _DoWear(obj)
			}
      UpdateArmour
		</script>
	</command>

	<command name="remove" template="remove">
		<multiple>
			return (ScopeInventory())
		</multiple>
		<script>
			foreach (obj, object) {
				f = _DoRemove(obj)
			}
      UpdateArmour
		</script>
	</command>
	
  <command name="wear2">
    <pattern>put #object# on</pattern>
    <script>
      _DoWear (object)
      UpdateArmour
    </script>
  </command>

  <command name="remove2">
    <pattern>take #object# off</pattern>
    <script>
      _DoRemove (object)
      UpdateArmour
    </script>
  </command>
  
  
  
  
  
  <!--  FUNCTIONS SUPPORTING COMMANDS  -->
  

	<function name="_DoWear" parameters="object" type="boolean"><![CDATA[
    // Is this possible?
		if(not HasAttribute(object,"worn") or not HasAttribute(object,"wear_slots")) {
      // No, not a garment
			msg (DynamicTemplate("WearUnsuccessful", object))
      return (false)
		}
    if (object.parent = game.pov and object.worn = true) {
      // No, already worn
			msg (DynamicTemplate("AlreadyWearing", object))
      return (false)
		}
    if (not ListContains(ScopeInventory(), object)) {
      // No, not held
			msg (DynamicTemplate("CannotWearIfNotHeld", object))
      return (false)
		}
    // Are other worn garments in the way?
    obj = _GetOuterForGarment(game.pov, object)
    if (not obj = null) {
      if (obj.wear_layer > object.wear_layer or obj.wear_layer = 0 or object.wear_layer = 0) {
        msg(DynamicTemplate("CannotWearOver", obj))
        return (false)
      }
      if (obj.wear_layer = object.wear_layer) {
        msg(DynamicTemplate("CannotWearWith", obj))
        return (false)
      }
    }
    
    if (not TestGarment(object)) {
      return (false)
    }
			
    WearGarment(object)
    if(object.wearmsg = null) {
      P (DynamicTemplate("WearSuccessful",object))
    } else {
      P (object.wearmsg)
    }
    
    //do after
    if (HasScript(object, "onafterwear")) {
      do(object, "onafterwear")
    } else if(HasString(object, "onafterwear")) {
      P (object.onafterwear)
    }
    return(true)
	]]></function>
	
  
  
  
  
  
  <!--
  Use this to have the player wearing an item at the start of the game.
  It will ensure it is in the player's inventory.
  -->
	<function name="WearGarment" parameters="object"><![CDATA[
    if (HasAttribute(game, "wornclothinglocation")) {
      object.parent = game.wornclothinglocation
    }
    else {
      object.parent = game.pov
    }
    object.worn = True
    object.original_drop = object.drop
    object.original_alias = object.alias
    object.drop = false
    
    object.display = GetDisplayName(object)
    object.alias = GetDisplayAlias(object) + " (worn)"
    if (game.feature_limitinventory and HasInt(game.pov, "maxobjects")) {
      game.pov.maxobjects = game.pov.maxobjects + 1
    }
    SetVerbs
    SetBonuses(object, true)
	]]></function>
  
  
  
  
  
	<function name="_DoRemove" parameters="object" type="boolean"><![CDATA[
		if (not ListContains(GetAllChildObjects(player), object)) {
			msg ("You cannot; you do not have " + object.article + ".")
      return (false)
		}
		if (not GetBoolean(object, "worn")) {
			msg ("You are not wearing " + object.article + ".")
      return (false)
		}
		if (not GetBoolean(object, "removeable")) {
      if (HasString(object, "notremoveablemessage")) {
  			msg (object.notremoveablemessage)
      }
      else {
  			msg ("You can't remove " + object.article + "!")
      }
      return (false)
		}
    if (game.feature_limitinventory and HasInt(game.pov, "maxobjects")) {
      if (ListCount(GetDirectChildren(game.pov)) >= game.pov.maxobjects) {
  			msg (DynamicTemplate("MaxObjectsInInventory", object))
        return (false)
      }
    }
    
    obj = _GetOuterForGarment(game.pov, object)
    if (not obj = null) {
      if (obj.wear_layer > object.wear_layer) {
        msg(DynamicTemplate("RemoveFirst", obj))
        return (false)
      }
    }

    if(object.removemsg = null) {
      P (DynamicTemplate("RemoveSuccessful",object))
    } else {
      P (object.removemsg)
    }
    SetBonuses(object, false)
    
    object.worn = false
    object.drop = object.original_drop
    object.alias = object.original_alias
    object.original_drop = null
    object.original_alias = null
    object.display = null
    object.parent = game.pov
    if (game.feature_limitinventory and HasInt(game.pov, "maxobjects")) {
      game.pov.maxobjects = game.pov.maxobjects - 1
    }
    
    //do after
    if (HasScript(object, "onafterremove")) {
      do(object, "onafterremove")
    } else if(HasString(object, "onafterremove")) {
      P(object.onafterremove)
    }
    SetVerbs
    return(true)
	]]></function>
	
  
  
  
  
  
  
  
  <!--   UTILITY FUNCTIONS   -->
  
  
  <!--
  Returns the outermost garment in one of the slots of the given garment (not necessarily the same
  as the outermost garment)
  -->
	<function name="_GetOuterForGarment" parameters="char, garment" type="object"><![CDATA[
    foreach (slot, garment.wear_slots) {
      obj = GetOuterFor(char, slot)
      if (not obj = null and not obj = garment) {
        return (obj)
      }
    }
	  return (null)
	]]></function>
	
  
  
  <!--
  Returns the outermost garment in the given slot
  -->
	<function name="GetOuterFor" parameters="char, slot" type="object"><![CDATA[
    garment = null
    foreach(o, _GetList(char, slot)) {
      if (garment = null) {
        garment = o
      }
      else if (o.wear_layer > garment.wear_layer) {
        garment = o
      }
    }
    return (garment)
	]]></function>
	
  
  
  <!--
  Returns all the garments worn
  -->
	<function name="ListWornFor" parameters="char" type="objectlist">
    return (_GetList(char, null))
  </function>
	


  <!--
  Returns all the garments visible for the given char.
  Note that garments that are not assigned to slot will NOT be included.
  -->
	<function name="ListVisibleFor" parameters="char" type="objectlist">
    ol = newObjectList()
    foreach (s, _Slots()) {
      o = GetOuterFor(char, s)
      if (not o = null and not ListContains(ol, o)) {
        list add (ol, o)
      }
    }
    return (ol)
  </function>


  
  <!--
  Returns all the garments in the given slot
  -->
	<function name="_GetList" parameters="char, slot" type="objectlist"><![CDATA[
    garments = NewObjectList()
    foreach(o, GetDirectChildren(char)) {
      if (HasAttribute(o, "wear_slots") and HasInt(o, "wear_layer") and GetBoolean(o, "worn")) {
        if (ListContains(o.wear_slots, slot) or slot = null) {
          list add(garments, o)
        }
      }
    }
    return (garments)
	]]></function>
	
  
  <!--
  Returns TWICE the level of protection in the given slot, which could
  be up to 11 for plate on top of chain.
  -->
	<function name="_GetSlotArmour" parameters="char, slot" type="int"><![CDATA[
    total = 0
    max = 0
    foreach(o, _GetList(char, slot)) {
      total = total + o.armour
      if (o.armour > max) max = o.armour
    }
    return (total + max)
	]]></function>
	
  
  <!--
  Returns TWENTY TIMES the level of overall protection, which could
  be up to 110 for plate on top of chain.
  -->
	<function name="GetArmourFor" parameters="char" type="int"><![CDATA[
    total = 2 * _GetSlotArmour(char, "head") + 3 * _GetSlotArmour(char, "torso")
    foreach(s, Split("feet|legs|shoulders|arms|hands", "|")) {
      total = total + _GetSlotArmour(char, s)
    }
    return (total)
	]]></function>

  
  
  
  <!--
  Returns the given object list as a string in the form a one, a two and a three.
  -->
  <function name="_Slots" type="stringlist"><![CDATA[
    sl = NewStringList()
    foreach (o, AllObjects()) {
      if (HasAttribute(o, "wear_slots")) {
        foreach (s, o.wear_slots) {
          if (not ListContains(sl, s)) {
            list add(sl, s)
          }
        }
      }
    }
    return (sl)
	]]></function>

  
  
  
  <!--
  Returns the given object list as a string in the form a one, a two and a three.
  -->
  <function name="_List" parameters="ol" type="string"><![CDATA[
    if (ListCount(ol) = 0) return ("nothing")
    strings = (TypeOf(ol) = "stringlist")
    if (ListCount(ol) = 1 and strings) return (StringListItem(ol, 0))
    if (ListCount(ol) = 1) {
      o = ObjectListItem(ol, 0)
      return (o.display)
    }
    
    if (strings) {
      sl = ol
      s2 = StringListItem(ol, ListCount(ol) - 1)
    }
    else {
      sl = NewStringList()
      foreach (o, ol) {
        s2 = o.display
        list add (sl, s2)
      }
    }

    list remove (sl, s2) 
    s = LCase(Join(sl, ", ") + " and " + s2)
    return (s)
  ]]></function>
  
  
  
  
  
  <!--   FUNCTIONS FOR PLAYER ONLY   -->
  
  
  
  <!--
  Returns the outermost garment in the given slot
  -->
	<function name="GetOuter" parameters="slot" type="object">
    return(GetOuterFor(game.pov, slot))
	</function>


  <!--
  Returns TWENTY TIMES the level of overall protection, which could
  be up to 110 for plate on top of chain.
  -->
	<function name="GetArmour" type="int">
    GetArmourFor(game.pov)
	</function>


  
	<function name="SetVerbs"><![CDATA[
    foreach(o, GetDirectChildren(game.pov)) {
      if (HasAttribute(o, "wear_slots") and HasInt(o, "wear_layer")) {
        SetVerbsForGarment(o)
      }
    }
	]]></function>
	


	<function name="WornCount" type="int"><![CDATA[
    count = 0
    foreach(o, GetDirectChildren(game.pov)) {
      if (GetBoolean(o, "worn")) {
        count = count + 1
      }
    }
    return (count)
	]]></function>

  
  
	<function name="SetVerbsForGarment" parameters="garment"><![CDATA[
    outer = _GetOuterForGarment(game.pov, garment)
    if (garment.worn) {
      if (outer = null) {
        garment.inventoryverbs = lists.remove
      }
      else if (outer.wear_layer < garment.wear_layer) {
        garment.inventoryverbs = lists.remove
      }
      else {
        garment.inventoryverbs = lists.lookat
      }
    }
    else {
      if (outer = null) {
        garment.inventoryverbs = lists.wear
      }
      else if (outer.wear_layer < garment.wear_layer) {
        garment.inventoryverbs = lists.wear
      }
      else {
        garment.inventoryverbs = lists.drop
      }
    }
	]]></function>
	
  
  
  
  <!--
  Returns the items currently worn as a string in the form a one, a two, a three.
  -->
  <function name="ListClothes" type="string"><![CDATA[
    return (_List(ListWornFor(game.pov)))
  ]]></function>  
    
  
  <!--
  Returns TWENTY TIMES the level of overall protection, which could
  be up to 110 for plate on top of chain.
  -->
	<function name="GetArmour" type="int">
    return (GetArmourFor(game.pov))
	</function>
  



  <!--  CUSTOMISATION  -->
  
  
  <!--
  This gets called when an item is put on or taken off, and can be used
  to add or subtract attribute bonuses for that garment, for example.
  The wearflag will be true when the item is put on and false when taken
  off.
  If the item can be removed in other ways, remember to call this.
  -->
	<function name="SetBonuses" parameters="garment, wearflag">
	</function>
  


  

  <!--
  This gets called only when the action is successful; for text that is part of
  the narrative. You can override this in your own code to flag that a command was successful
  or to display narrative text differently to meta text.
  -->
	<function name="P" parameters="s">
    msg(s)
	</function>
  
  
  <!--
  Override this in your game to have situations where the garment bonus is doubled or more
  -->
  <function name="GarmentBonusMultiplier" type="int"><![CDATA[
    return (1)
	]]></function>


  <!--
  Override this in your combat library
  -->
  <function name="UpdateArmour"><![CDATA[
	]]></function>


  <!--
  Override this in your game for custom testing, for
  example to check the size is suitable.
  -->
  <function name="TestGarment" type="boolean" parameters="object"><![CDATA[
    return (true)
	]]></function>


  
  
  
  
  <!--  TYPES  -->
  
  
  
	<type name="wearable">
		<worn type="boolean">false</worn>
		<armour type="int">0</armour>
    <take type="script">
      msg("You pick up the " + LCase(GetDisplayAlias(this)) + ".")
      this.inventoryverbs = if(game.pov.headwearslot = null, lists.wear, lists.drop)
      this.parent = game.pov
    </take>
		<removeable type="boolean">true</removeable>
		<wear_layer type="int">2</wear_layer>
		<inventoryverbs type="listextend">[Wear];[Remove]</inventoryverbs>
    <wear_slots type="stringlist" />
	</type>
  
  
  
  
  
  
  
  
	<!-- INTERFACE -->
  
  
  
	<tab>
		<parent>_ObjectEditor</parent>
		<caption>Wearable</caption>
		<mustnotinherit>editor_room; defaultplayer</mustnotinherit>
		
		<control>
			<controltype>title</controltype>
			<caption>Wearable</caption>
		</control>
		
		<control>
			<controltype>dropdowntypes</controltype>
			<caption>Can be worn?</caption>
			<types>*=Cannot be worn; wearable=Can be worn</types>
			<width>150</width>
		</control>
		
		<control>
			<mustinherit>wearable</mustinherit>
			<controltype>number</controltype>
			<caption>Wear Layer</caption>
			<attribute>wear_layer</attribute>
		</control>
		
		<control>
			<mustinherit>wearable</mustinherit>
			<caption>Wear Slot</caption>
			<controltype>list</controltype>
			<attribute>wear_slots</attribute>
			<editprompt>Please enter the name for the wear location</editprompt>
		</control>
		
		<control>
			<mustinherit>wearable</mustinherit>
			<controltype>label</controltype>
			<caption>If two objects have the same wear location, they will not be able to be worn at a same time. Any number items without wear locations can be worn.</caption>
			<advanced/>
		</control>
		
		<!-- snip -->
		
		<control>
			<mustinherit>wearable</mustinherit>
			<controltype>textbox</controltype>
			<attribute>wearmsg</attribute>
			<caption>Message to print when wearing (leave blank for default)</caption>
			<nullable/>
		</control>
		
		<control>
			<mustinherit>wearable</mustinherit>
			<controltype>textbox</controltype>
			<attribute>removemsg</attribute>
			<caption>Message to print when removing or trying to remove (leave blank for default)</caption>
			<nullable/>
		</control>
		


		<control>
			<controltype>title</controltype>
			<caption>Advanced features</caption>
		</control>
		



		<control>
			<mustinherit>wearable</mustinherit>
			<controltype>checkbox</controltype>
			<attribute>removeable</attribute>
			<caption>Removeable?</caption>
		</control>
		
		<control>
			<mustinherit>wearable</mustinherit>
			<controltype>number</controltype>
			<caption>Protection (if implemented!)</caption>
			<attribute>armour</attribute>
		</control>
		
		<control>
			<mustinherit>wearable</mustinherit>
			<controltype>textbox</controltype>
			<attribute>bonusatts</attribute>
			<caption>Wearing gives a bonus to these attributes</caption>
			<nullable/>
      <onlydisplayif>game.feature_bonusgarments</onlydisplayif>
		</control>




		<!-- Event Handlers from here down none/text/scripts -->
		
		<control>
			<mustinherit>wearable</mustinherit>
			<controltype>title</controltype>
			<caption>After Wearing</caption>
		</control>
		
		<control>
			<mustinherit>wearable</mustinherit>
			<selfcaption>After wearing the object</selfcaption>
			<controltype>multi</controltype>
			<attribute>onafterwear</attribute>
			<types>null=None; string=Text; script=Run script</types>
			<editors>string=textbox</editors>
			<expand/>
		</control>
		
		<control>
			<mustinherit>wearable</mustinherit>
			<controltype>title</controltype>
			<caption>After Removing</caption>
		</control>
		
		<control>
			<mustinherit>wearable</mustinherit>
			<selfcaption>After removing the object</selfcaption>
			<controltype>multi</controltype>
			<attribute>onafterremove</attribute>
			<types>null=None; string=Text; script=Run script</types>
			<editors>string=textbox</editors>
			<expand/>
		</control>
		
	</tab>
</library>